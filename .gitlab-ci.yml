before_script:
  # load the requested modules on oberon
  - module load anaconda/3

tdev2-build:
  stage: build
  script:
    # create a Python virtual environment dedicated to the test (if not existing)
    - conda env create --file environment.yml 2> /dev/null || true
    - conda activate TDE
    - conda install pip

    # install tde
    #- pip install coverage intervaltree ipdb numpy pandas editdistance pytest
    - python setup.py build
    - python setup.py install

tdev2-test:
  stage: test
  script:
    # run the unit tests within the CI environment
    - conda activate TDE
      #- python setup.py test
    - pytest
  after_script:
      - pip install codecov
      - codecov
      - bash <(curl -s https://codecov.io/bash) -t f0083c40-8708-4805-9ae8-4511d4fb63ec

# Deploy documentation
documentation:
  stage: deploy
  only:
    refs:
      - master
  script:
    - module load anaconda/3
    - conda activate TDE
      #- python setup.py test
    - sphinx-build docs/source docs/build
    - scp -r docs/build/* cognitive-ml.fr:/var/www/docs.cognitive-ml.fr/tde

# deploy on anaconda
# deploy-conda:
#  stage: deploy
#  only:
#    - tags
#    - triggers
#  script:
#    - module load anaconda/3
#    - conda activate TDE
#    - cd .conda
#    - conda build  -c conda-forge --user coml --token $CONDA_TOKEN --skip-existing .
#    - conda build purge
